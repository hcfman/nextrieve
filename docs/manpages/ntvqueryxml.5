.\" Automatically generated by Pod::Man version 1.15
.\" Fri Nov 22 12:11:11 2002
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "ntvqueryxml 5"
.TH ntvqueryxml 5 "2.0.0" "2002-11-22" "NexTrieve"
.UC
.SH "NAME"
ntvqueryxml \*(-- \s-1XML\s0 format of nextrieve search queries. 
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Search queries submitted to a nextrieve search engine are in
\&\s-1XML\s0 form.  The \s-1DTD\s0 describing the format of nextrieve query \s-1XML\s0
can be found in \fIntvdtds\fR\|(5).
.PP
A nextrieve query is implemented as an <ntv:query> container.
There are a number of optional attributes of this container defining
various search options, and there are a number of optional nested
elements in this container giving further text-based options.
.PP
Any text attached to the <ntv:query> container itself is considered
general query text.
.PP
Note that you can generate example nextrieve query \s-1XML\s0 by using
ntvquerygen.  A description of ntvquerygen can be found in \fIntvquerygen\fR\|(1).
.Sh "Attributes"
.IX Subsection "Attributes"
The attributes that can be applied to the top-level <ntv:query> element
are as follows:
.Ip "\fBfirsthit='\f(BIn\fB'\fR" 4
.IX Item "firsthit='n'"
The 1\-based offset of the first hit to return in the complete nominal
list of results.  A default of \*(L"1\*(R" is used.
.Ip "\fBdisplayedhits='\f(BIn\fB'\fR" 4
.IX Item "displayedhits='n'"
The number of hits to return out of the complete nominal list of results.
A default of all the hits is used.
.Ip "\fBtotalhits='\f(BIn\fB'\fR" 4
.IX Item "totalhits='n'"
The maximum size of the complete nominal list of results.  A default of
1000 is used.
.Ip "\fBtype='\f(BIsearchtype\fB'\fR" 4
.IX Item "type='searchtype'"
\&\fIsearchtype\fR can be either \*(L"fuzzy\*(R" for a fuzzy search, or \*(L"exact\*(R" for
an exact search.  A default of \*(L"fuzzy\*(R" is applied.
.Sp
It should be noted that if the target text index only has one form
of index (either only exact, or only fuzzy), the type of search specified
here will be changed automatically if it doesn't match the index.
A warning is issued in this case in the result header.
.Ip "\fBfuzzylevel='\f(BIlevel\fB'\fR" 4
.IX Item "fuzzylevel='level'"
The fuzzy level for a fuzzy search.  \fIlevel\fR should have a value in
the range 0 to 3 inclusive.  A default value of 1 is used if a fuzzy
search is performed.  This attribute has no effect on an exact search.
.Ip "\fBlongform='\f(BIn\fB'\fR" 4
.IX Item "longform='n'"
If \fIn\fR is 0, a short-form of the result list will be returned, otherwise
a long form will be returned.  The only difference is in the length
of the element names.
.Sp
A default value is found in the resource file of the target text index.
If nothing is specified there, a value of \*(L"1\*(R" is used.
.Ip "\fBshowattributes='\f(BIn\fB'\fR" 4
.IX Item "showattributes='n'"
If \fIn\fR is non-zero, attribute information (if any) will be returned
in the result list.  If \fIn\fR is \*(L"0\*(R", no attribute information will be
returned.
.Sp
By default, a value of \*(L"1\*(R" is used.
.Ip "\fBshowpreviews='\f(BIn\fB'\fR" 4
.IX Item "showpreviews='n'"
If \fIn\fR is non-zero, preview text will be returned in the result list.
If \fIn\fR is \*(L"0\*(R" no preview text will be returned.
.Sp
By default, a value of \*(L"1\*(R" is used.
.Ip "\fBid='\f(BIid-string\fB'\fR" 4
.IX Item "id='id-string'"
If present, \fIid-string\fR will be returned as the value of the \*(L"id\*(R"
attribute of the <header> element in the returned result list.
.Sp
As a consequence of specifying an \*(L"id\*(R" attribute, the connection to
a nextrieve search server (either ntvsearchd or ntvcached) will remain
open, as the use of an \*(L"id\*(R" in this way allows the client to submit
multiple queries and associate later results with queries.
.Sp
See the section \*(L"Permanent Query Connections\*(R" below.
.if n .Ip "\fBhighlightlength=""""\f(BIn\fB""""\fR" 4
.el .Ip "\fBhighlightlength=``\f(BIn\fB''\fR" 4
.IX Item "highlightlength=""n""
The value \fIn\fR specifies the minimum length a word in returned preview
text of a result list must have before it is highlighted if it is deemed
relevane to the original query.
.Sp
Note that highlightlength is only relevant for fuzzy searches.
.Sp
A default value of \*(L"3\*(R" is applied.
.Sh "Nested Elements"
.IX Subsection "Nested Elements"
There are a number of containers that can appear inside a <ntv:query>
container.
.PP
.I "<constraint>...</constraint>"
.IX Subsection "<constraint>...</constraint>"
.PP
A \*(L"constraint\*(R" is an expression that restricts the set of documents
that are searched.  The expression describes various attributes
and the values they must have for a document to be valid.  It does not
operate on the text of a document.
.PP
An attribute of a document in a nextrieve text index is a named quantity
having a boolean (flag), numeric or string typed value.  The set of
allowable attributes in any particular text index is specified by
<attribute> elements in its resource file.  A discussion of the
content of nextrieve resource files can be found in \fIntvresourcefile\fR\|(5).
.PP
By default, if no constraint is used, all documents can be returned.
.PP
The valid operators in a constraint expression consist of:
.Ip "&" 4
Logical \*(L"and\*(R" operation.
.Ip "|" 4
Logical \*(L"or\*(R" operation.
.Ip "!" 4
Logical \*(L"not\*(R" operation.
.Ip "<, <=, =, !=, >=, >" 4
Comparison operators.
.Ip "(, )" 4
Parentheses for changing precedence.
.Ip "in" 4
.IX Item "in"
Using \*(L"attrname in (val1, val2...)\*(R" is shorthand for using
.Sp
.Vb 1
\&    (attrname = val1 | attrname = val2...)
.Ve
.Ip "like" 4
.IX Item "like"
The \*(L"like\*(R" operator allows the comparison of a string valued attribute
against a simple regular expression.  The simple regular expression
can contain '*' (match any sequence of characters) and '?' (match
exactly a single character).
Eg:
.Sp
.Vb 1
\&    filename like "fred"
.Ve
will match all documents having a filename attribute containing the
text \*(L"fred\*(R" anywhere, eg, \*(L"/tmp/fred\*(R", \*(L"/tmp/fred/jack\*(R".
.Sp
.Vb 1
\&    filename like "fre*d"
.Ve
will match \*(L"fred\*(R", \*(L"fread\*(R" and \*(L"fredd\*(R"
.Sp
.Vb 1
\&    filename like "fre?d"
.Ve
will match \*(L"fread\*(R" and \*(L"fredd\*(R" but not \*(L"fred\*(R".
.PP
As of the current NexTrieve release, operations on multi-valued attributes
(one where a single document
can have multiple values of this attribute attached, like keywords)
cannot be used in a constraint.
.PP
Attributes are referenced by name.  A flag type attribute cannot be compared
to anything; it provides a boolean value directly.  Other attribute types must
be compared against a value to return a boolean value.
.PP
Eg, if the following attributes are defined in the resource file:
.PP
.Vb 2
\&    <attribute name="political" type="flag"   key="notkey" nvals="1"/>
\&    <attribute name="date"      type="number" key="notkey" nvals="1"/>
.Ve
some example constraints are:
.PP
.Vb 3
\&    <constraint> political                          </constraint>
\&    <constraint> political &amp; date &gt; 20010131 </constraint>
\&    <constraint> !political                         </constraint>
.Ve
It should be noted that string based comparisons are performed in 
a case-sensitive fashion, while the \*(L"like\*(R" operator runs
case-insensitively.
.PP
Also, a string value must be specified with surrounding single
or double quotes.
.PP
.I "<texttype/>"
.IX Subsection "<texttype/>"
.PP
It is possible to restrict the textual part of a search to named
\&\*(L"text type\*(R" regions.  Text types are declared in the resource
file for the text index using the <texttype name="\fItexttypename\fR"/>
container.
.PP
Inside a query, text type restrictions on the search are defined by a
sequence of:
.PP
.Vb 1
\&    <texttype name="ttname" weight="ttweight"/>
.Ve
elements.  \fIttname\fR indicates the text type, with special values of:
.Ip "''" 4
Ie, empty.  This indicates the \*(L"unnamed\*(R" text type which is present by
default when the top-level <text> element of a document is indexed.
Ie, this represents the \*(L"default\*(R" text; excluding all other text marked
with a specific text type.
.Ip "'*'" 4
This indicates the weight \fIttweight\fR is to be applied to all other text
types defined in the text index, without having to know their names.
.PP
The \fIttweight\fR value is a weight expressed as a percentage, 100 being
the \*(L"normal\*(R" or \*(L"default\*(R" value.  This weight indicates how the importance
of words found in a text type of \fIttname\fR relate to words found in
other text types.  A weight of \*(L"0\*(R", for example, indicates that the
nominated text type is not to be searched.  A weight of \*(L"200\*(R" indicates
that words found in text of that type are to be thought of as worth
twice as much as words found in other text types that have (the default)
values of 100.
.PP
The sequence of <texttype> containers is applied in the order they are
presented in the query.  By default (if no <texttype> elements
are present) all text types are searched.
.PP
When the first <texttype> container is encountered, it restricts
the search to search \fIonly\fR that nominiated text type.  Following
<texttype> elements add to the set of allowable text types.
.PP
Assigning a weight of \*(L"0\*(R" also indicates that a text type is not
to be searched.
.PP
Some examples can help:
.Ip "\(bu" 4
.Vb 1
\&    <texttype name="title"/>
.Ve
Only search titles.  All other text is excluded from the search.
.Ip "\(bu" 4
.Vb 1
\&    <texttype name="title" weight="200"/><texttype name="*"/>
.Ve
Search all text types, with words found in the title having twice the
scoring weight of words found in other text types.
.Ip "\(bu" 4
.Vb 1
\&    <texttype name="title"/><texttype name=""/>
.Ve
Search only title text and default (untyped) text.
.Ip "\(bu" 4
.Vb 1
\&    <texttype name="*"/><texttype name="" weight="0"/>
.Ve
Search all text types \fIexcept\fR the default (untyped) text type.
.PP
.I "<indexname>...</indexname>"
.IX Subsection "<indexname>...</indexname>"
.PP
The content of an <indexname> element is the name of a \*(L"logical index\*(R"
to search.  This container is examined by a nextrieve caching server
(ntvcached) which can manage multiple \*(L"logical\*(R" text indexes being present
in a single \*(L"physical\*(R" text index.  It does this by modifiying the user
constraint (if any) with an additional constraint specific to the logical
index being searched.
.PP
More information regarding logical indexes managed by ntvcached can be
found in \fIntvcached\fR\|(1).
.PP
.I "<qall>, <qnot>, <qany>"
.IX Subsection "<qall>, <qnot>, <qany>"
.PP
These are specific query-text containers:
.PP
.Vb 3
\&    <qall>all words</qall>
\&    <qnot>none of the words</qnot>
\&    <qany>one or more of these words</qany>
.Ve
In addition to the \*(L"general\*(R" text container, <ntv:query> itself:
.PP
.Vb 1
\&    <ntv:query>+general -text here</ntv:query>
.Ve
\&\*(L"General search text\*(R" can be entered in the <ntv:query> top level container.
To indicate that a word \fImust\fR be present in returned documents, it should
be prefixed with '+'.  To indicate that a word is \fIprohibited\fR for appearing
in returned documents, it should be prefixed with '\-'.  Other words in the
query may or may not be in returned documents.
.PP
It should be noted that the '+'/'\-' inclusion and exclusion characters
are only applied on \fIexact\fR searches.  With a fuzzy search, words prefixed
with '+' are considered to be the same as unprefixed words, and words
prefixed with '\-' are simply not included in the search terms.  A document
returned as the result of a fuzzy search
may still include words prefixed with '\-', and might not contain a word
prefixed with '+'.
.PP
The specific text containers <qall>, <qnot> and <qany> represent collections
of words of solely the above categories.  Words within <qall> are equivalent
to those in <ntv:query> prefixed with '+'.  Words within <qnot> are
equivalent to those in <ntv:query> prefixed with '\-', and words within <qany>
are equivalent to unprefixed words.  It is not necessary to prefix
words in these specific text containers; in fact, such prefixing is ignored.
.PP
The use of specific text containers such as this makes it easier to manage
search forms that have different fields for \*(L"all words\*(R",
\&\*(L"some words\*(R" and \*(L"none of the words\*(R", for example.  It also make it easier
to manage cases where there is a single text box with an \*(L"all words\*(R" button.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 1
\&    ntvsearch(1), ntvsearchd(1), ntvcached(1), ntvindex(1)
.Ve
