
=head1 OVERVIEW

This tutorial is really a walk-through of some simple operations to help
you get started using the nextrieve indexer and searcher at a very basic
level.  It assumes that the nextrieve utilities have already been installed.

This tutorial is in two parts.

The first part uses a helper script, ntvmakenewwebindex, to automatically
create a resource file and associated HTML templates to index either
web pages or mailboxes and search them in a web server environment.

The second part uses more fundamental principles to create a text index
for searching at an XML level.

=head1 USING NTVMAKENEWWEBINDEX

The ntvmakenewwebindex script asks a number of simple questions that
allow you to easily set up a NexTrieve text index and associated HTML
templates to allow searching of HTML pages or mailboxes with a web
server.

The text index will be created under a nominated collection directory.
Ntvultralite is used to accept user queries for searching, and for
providing HTML pages displaying the results.  Ntvultralite is executed
from a small cgi-bin script that sets up parameters appropriate for
the index being searched.  As this script is located in the cgi-bin
directory of your web server, ntvmakenewwebindex should be executed by a
user with permissions allowing the script to be created there.

See the ntvultralite documentation for further details on the functioning
of ntvultralite.

=head2 The Questions

Ntvmakenewebindex asks a number of questions during creation of the
text index architecture, and these questions are discussed below, one
section to a question.

=head3 Collection Directory

The "collection directory", the first question asked by the 
ntvmakenewwebindex script,
is simply a directory in which your indexes will be stored.  By default
the directory "collection" under your NexTrieve installation directory
will be used.

If a directory other than the default is used, one must run later
"maintenance commands" (such as ntvfullreindex) with additional
information indicating the directory.  A collection 
directory of
/home/fred/mycollection would be specified with either:

    NTVBASE=/home/fred/mycollection ntvfullreindex ...

or

    ntvfullreindex -B /home/fred/mycollection ...

=head3 The Index Name

The name of the index should be a simple word.  This name is used to
create a subdirectory under the collection directory containing the index,
and will also be the name of the cgi-bin script created automatically
to allow web-access to the index.

A name of "testidx" is used in this discussion.

=head3 CGI Script Directory

To allow web access to the index a small perl script or C-program will be
created in a cgi-bin directory used by your web server.  The cgi-bin
directory is specified here.

The default installation location for apache, for example, is
/usr/local/apache/cgi-bin.

You must have write access to this directory in order to create the
script there.

=head3 Perl Pathname

A number of scripts require perl for their operation, and the pathname of
the perl to use is specified here.  "/usr/bin/perl" is used by
default.

=head3 Which Template

As of this writing there is a choice of the following simple indexing and
viewing templates.

=over *

=item htmlsimple

This provides a simple way to index and view HTML files.

For simple searching there is a search text box with fuzzy and title-only
checkboxes.

For advanced searching there are additional controls: an all-words checkbox
(indicating all words must be present for an exact search), number of hits
to display per page, the total number of hits to process and the fuzzy level
for fuzzy searches.

Screen snaphots have been taken of ##IMAGE-tutgs-html-simple.gif## and
##IMAGE-tutgs-html-advanced.gif## searching.

It should be noted that it is possible to index HTML pages, *.DOC files
and *.PDF files with this index with currently available filters.

For *.DOC files the filter ntvdocfilter is used.  This relies on the freely
available application "antiword" being installed correctly.  Ntvdocfilter
will use antiword with the "-m UTF-8.txt" switch -- this implies that
the UTF-8.txt file (which comes with the antiword distribution) must
be correctly installed in either the ~/.antiword directory of the user
doing the indexing, or in the antiword global directory (normally
/usr/share/antiword).

For *.PDF files the filter ntvpdffilter is used.  This relies on the freely
available application "pdftotext".  Note that you must have a version of
pdftotext installed that understands the '-enc UTF-8' switch.  Version 1.00
or later should be fine.

=item mailsimple

This provides a simple way to index and view textual
mailbox files containing email messages.

The controls have the equivalent functionality of the htmlsimple
controls.

Screen snaphots have been taken of ##IMAGE-tutgs-mst-simple.gif## and
##IMAGE-tutgs-mst-advanced.gif## searching.

=item mailpersonal

This provides an extended way to index and view mail messages
in mailbox files.

For simple searching, there is a text box for the search terms, with
radio controls allowing fuzzy, exact and exact-all-words searches.
There is also a subjects-only textbox.

In addition, there is the ability to restrict the search by date, by
using checkboxes gleaned from the dates of mail messages that have been
indexed.  These checkboxes are created by running the "adjust" script
of the mail archive.  Ie, if "mymail" is being used as the name of
the index under a collection "/tmp/mycollection", the checkboxes are
created through the use of the script "/tmp/mycollection/mymail/mymailadjust".
This script can be run periodically; typically either once a month, or once
for every index operation, depending on your preference.

With advanced searching, the single text box for search terms is replaced
by a text boxes for each of "all", "any" and "not" search terms (where
all words, any of the words and none of the words respectively must be
in returned documents).  There is a fuzzy and exact radio control and
a subjects-only checkbox.  In addition there are controls allowing
the specification of the number of hits
to display per page, the total number of hits to process and the fuzzy level
for fuzzy searches.

There are also text boxes allowing the specification of a simple pattern
for requiring or excluding text in various fields of returned emails, the 
fields being the subject, from and to fields.

Screen snaphots have been taken of ##IMAGE-tutgs-mpt-simple.gif## and
##IMAGE-tutgs-mpt-advanced.gif## searching.

=item mailmhonarc

This provides an extended way to index and view mail messages
archived by mhonarc.

For simple searching the controls are as before; there is a text box
for the search terms, with
radio controls allowing fuzzy, exact and exact-all-words searches.
There is also a subjects-only textbox, and checkboxes restricting the date
range of the search.

With advanced searching there are controls similar to mailextra1 controls:
text boxes for "all", "any" and "not" words, a subjects-only checkbox and
date restriction checkboxes, and an exact and fuzzy radio control.

In addition, there are further text boxes allowing simple patterns to be
entered for restricting the messages returned by matching against the
from text and subject text of the message:

=over *

=item From includes

The From field of the message must include the specified pattern.

=item From excludes

The From field of the message cannot include the specified pattern.

=item Subject includes

The Subject field of the message must include the specified pattern.

=item Subject excludes

The Subject field of the message cannot include the specified pattern.

=back

Screen snaphots have been taken of ##IMAGE-tutgs-mhonarc-simple.gif## and
##IMAGE-tutgs-mhonarc-advanced.gif## searching.

=back

Each type of template is, in fact, a subdirectory under the
"skel" directory in the NexTrieve installation directory.  Contained in each
subdirectory are the raw HTML templates and scripts appropriate for the
type of indexing being done (either HTML pages or mailboxes).  When 
a template is chosen, the files from the appropriate subdirectory are
copied to the appropriate destination under the target "collection" directory,
having appropriate substitutions performed along the way.

=head3 C-Compiler

There is a tiny script that will be created automatically under
the cgi-bin directory that will invoke ntvultralite with
parameters appropriate to the index being searched.

This "script" can either be a perl script or a C program.  If a C program
is preferred, enter the location of your C compiler here -- the
"textidx.c" file (which will be left in the cgi-bin directory) will
be automatically compiled to create "testidx".

If the C compiler location is left blank, "testidx" under the cgi-bin
directory will be created containing a perl script.

=head3 HTTP/1.0 200 OK

The next question indicates whether ntvultralite should emit
an "HTTP/1.0 200 OK" line or not.  By default ntvultralite does not
emit such a line.

=head3 Client Operation

The subsequent question "will ntvultralite be operating as a client?"
relates to the two modes of operation permitted by ntvultralite.

For simplest operation enter a blank line, indicating that ntvultralite
will directly interrogate the index files.

As the size of your text index increases, it makes more sense to choose
"client/server" mode by entering an address of the form:

    hostname:portnumber

eg

    localhost:7000

This indicates that instead of interrogating the text index files
directly, ntvultralite will communicate with an ntvsearchd search daemon
that should be permanently running on the nominated host, listening on
the nominated port.  In this way ntvultralite can provide search results
in a timely manner, reducing other large startup overheads.

For example, if "testidx" under "/home/fred/mycollection" is very large,
you might decide to run the ntvsearchd daemon on port 7000 of localhost:

    ntvsearchd -A localhost -P 7000 \
	-R /home/fred/mycollection/testidx/testidx.res

Then indicate to ntvultralite that it should communicate with this
daemon by either entering:

    localhost:7000

to the above question, or, after the fact, adding the line:

    <server name="localhost:7000"/>

to the <ultralite> section of the /home/fred/mycollection/testidx/testidx.res
resource file.

=head3 Template-Specific Questions

There are a number of questions that depend on the type of index
being constructed.

Briefly, if "htmlsimple" was chosen, a directory will be asked for
from which all HTML files to be indexed can be found.  Also, if the HTML
files are directly accessable from the web server with the addition of
a simple prefix, that prefix can be specified here.

If you're creating an initial example just to see how things look, you
might consider using /usr/local/apache/htdocs for example if you have
apache installed.

If "mailsimple" or "mailextra1" was chosen, the mail address of an
administrator is wanted, along with what sendmail should be used to send
any emails.

=head3 CHROOT

If the ntvultralite system is to be running under a chroot
environment, the path to the chroot is specified here.

Note that to run under the specified chroot, you must be using a
nextrieve that has been installed under the chroot, and the collection
directory must be under the chroot.

=head3 Permissions

During normal operation, ntvultralite requires access to the logging
directory "logs" under the text index directory.  The user and
group ownership of this logs directory can be changed at this
point if required if the installer is running as root.

A typical choice when running on Linux is user and group "nobody".

=head2 What Has Been Set Up

Setting up an index "testidx" will have created a directory "testidx"
under the collection directory, and a script "testidx" under the cgi-bin
directory.

Inside the "testidx" directory there will be:

=over *

=item testidx.res

The resource file which describes the text index (used for indexing
and searching).  Also, in the <ultralite> section, are parameters used
by ntvultralite when searching the index and creating resulting HTML
web pages.

=item bin/

A number of script fragments are present defining how to perform
indexing operations.  The more important ones are:

=over *

=item testidxfullxml

This is always present.
For an HTML index, this script is simply a "find" operation on the
directory nominated during installation, locating all files matching
the mask "*.htm*".  The names of these files are then given to the
ntvhtml2ntvml script to have their content converted to indexable
XML.

For a mailbox index, this script simply finds all "*.mbx" files in
the archive area (testidx/archive) and gives these filenames to the
ntvmailbox2ntvml script to be converted to indexable XML.

=item testidxprepincxml, testidxincxml

These are only present for a mailbox index and are used when an "incremental
index" is performed.  Mail messages present in the incoming area
(testidx/spool/) are
converted to XML which is indexed, and the mail messages are then moved
to the archive area (testidx/archive/).

=back

=item index/

A subdirectory holding the actual *.ntv files comprising the index.
These files will be present after the first indexing operation has been
performed on the index.

=item index.new/

When a full reindex is performed the new index is created under the
"index.new" subdirectory.  After successful completion, the files under
"index.new" are moved to "index".

=item index.old/

After a successful full reindex operation hs been performed, the original
text index is found under this subdirectory.

=item templates/

The HTML template pages used by ntvultralite are present here.  The
function of these files is described completely in the ntvultralite
documentation.

=item logs/

Various log files can be present here, depending on logging options
in effect from either searching or ntvultralite operations.

=item archive/, spool/

These subdirectories are only present when a mailbox index has been 
set up.

Incoming messages should be placed in the "spool/" directory (incoming
messages can be placed here by following the instructions given
during execution of ntvmakenewwebindex).  These messages are not
searchable until an indexing operation (ntvfullreindex or ntvincreindex)
has been performed, during which time the messages are moved from
the spool/ directory to within mailbox files in the archive/ directory.

All mailboxes under archive/ have been incorporated into the
text index and are searchable.

=back

=head2 Maintenance Operations

It is possible to run a "full reindex" operation in which case
all the source files comprising the text index are read and re-indexed.

For an index "testidx" under the default collection directory, it suffices
to use the command:

    ntvfullreindex testidx

If the "testidx" index is under a non-default colleciton directory
/home/fred/mycollection, one should use:

    NTVBASE=/home/fred/mycollection ntvfullreindex testidx

For a "mailsimple" type text index, it is possible to "incrementally
reindex" from the source files.  Mail messages present in the staging
area are read and indexed into the already existing text index.
These mail messages are then moved into an archive area.  One should use:

    ntvincreindex testidx

in such a case.

After any re-indexing operation has been performed, if the index
has been set up in "client/server" mode, the appropriate ntvsearchd
process should be killed and restarted.

=head1 CREATING A STANDALONE DATABASE FROM FIRST PRINCIPLES

=head2 What do You Want to Index, and Where?

The first step to take when creating a standalone database is to decide
what you want to index.
For this example
we're intending to index documents that have normal
body text, and "title" text.
We will create the text database under the directory /tmp/test/.
Each indexed document will have a couple of string attributes; it's filename
and its title.  We don't want two documents in the text database to have the
same filename -- if a second document is presented with a filename that's
already used by a document in the text database, the existing document
information in the database will be automatically marked as deleted.

We will also classify
documents as "political" or "financial", necessitating the use of two
"flag" attributes.

=head2 Create the Resource File

Create a "resource file" as a text file.  In this example, it will
be created as /tmp/test/test.res.
For this application it can simply contain:

    <ntv:resource xmlns:ntv="http://www.nextrieve.com/1.0">
	<indexdir name="/tmp/test"/>
	<logfile name="/tmp/test/test-log.txt"/>

	<indexcreation>
	    <attribute name="filename"
	               type="string" key="key-unique" nvals="1"/>
	    <attribute name="title"
	               type="string" key="notkey" nvals="1"/>
	    <attribute name="political"
	               type="flag" key="notkey" nvals="1"/>
	    <attribute name="financial"
	               type="flag" key="notkey" nvals="1"/>

	    <texttype name="title"/>
	</indexcreation>
    </ntv:resource>

=head2 Set Your Environment

To minimize the number of parameters given to later programs, set an
environment variable defining the name of this resource file.

    export NTV_RESOURCE=/tmp/test/test.res

Also, make sure that ntvindex, ntvsearch and other nextrieve utilities
are in your execution path.  Eg, if the nextrieve utilities have been installed
under /usr/local/nextrieve, use:

    PATH="$PATH:/usr/local/nextrieve/2.0.0/bin"

where the "2.0.0" is replaced by the version of NexTrieve that has been
installed.

It is now possible to create the index using ntvindex!

=head2 Create Your XML to be Indexed

For indexing, you must create an XML description of the document content to
index.  As a test, create a text file containing the following XML for two short
documents:

    <ntv:docseq xmlns:ntv="http://www.nextrieve.com/1.0">
    <document>
	<attributes>
	    <title>title of doc one</title>
	    <filename>filename-of-doc-one</filename>
	    <financial/>
	</attributes>
	<text>
	    <title>title text of doc one -- can be searched.</title>
	    Normal body text of doc two -- can be searched.
	    This is a "financial" document.
	</text>
    </document>
    <document>
	<attributes>
	    <title>title of second document</title>
	    <filename>filename-of-second-document</filename>
	    <political/>
	</attributes>
	<text>
	    <title>title text of second document -- can be searched.</title>
	    Normal body text of second document -- can be searched.
	    This is a "political" document.
	</text>
    </document>
    </ntv:docseq>

If this text file is called "x", use the following command to index the content:

    ntvindex -v x

Something like the following should be printed:

    Fri Nov 23 11:45:46 2001: indexing "-" starting...
    1 (2Kb)
    2 (4Kb)
    Fri Nov 23 11:45:46 2001: indexing done.
    Fri Nov 23 11:45:46 2001: Flushing 168 low hits

... and the database directory /tmp/test should now contain something like:

    -rw-rw-r--    1 user   user         48 Nov 23 11:45 att0str.ntv
    -rw-rw-r--    1 user   user         12 Nov 23 11:45 att0vals.ntv
    -rw-rw-r--    1 user   user         42 Nov 23 11:45 att1str.ntv
    -rw-rw-r--    1 user   user         12 Nov 23 11:45 att1vals.ntv
    -rw-rw-r--    1 user   user       8220 Nov 23 11:45 da0.ntv
    -rw-rw-r--    1 user   user          4 Nov 23 11:45 damap0.ntv
    -rw-rw-r--    1 user   user       1310 Nov 23 11:45 idx.ntv
    -rw-rw-r--    1 user   user       2056 Nov 23 11:45 rec.ntv
    -rw-rw-r--    1 user   user       8192 Nov 23 11:45 ref0.ntv
    -rw-rw-r--    1 user   user       2028 Nov 23 11:45 rfbmap0.ntv
    -rw-rw-r--    1 user   user        273 Nov 23 11:44 test.res

If you've indexed 100's of megabytes of information, you might want to
"optimize" the index for later searches.  Although it is not necessary
for just these two documents, we will show its use as an example.
Simply use:

    ntvopt /tmp/test
    $ ntvopt /tmp/test
    READING rec.ntv
	DONE: (0.003 sec)
    READING idx.ntv
	DONE: (0.000 sec)
    SORTING dictionary...
	DONE: (0.001 sec)
    WRITING idx-opt.ntv
	DONE: (0.000 sec)
    SIZING/SORTING ref*.ntv
    ....W(169)    DONE: (0.004 sec)
    COMPRESSING TO NEW DB...
    r(169)..

	DONE: (0.006 sec)
    $

The /tmp/test directory should now contain:

    $ ls -l /tmp/test
    total 72
    -rw-rw-r--    1 user   user         48 Nov 23 11:45 att0str.ntv
    -rw-rw-r--    1 user   user         12 Nov 23 11:45 att0vals.ntv
    -rw-rw-r--    1 user   user         42 Nov 23 11:45 att1str.ntv
    -rw-rw-r--    1 user   user         12 Nov 23 11:45 att1vals.ntv
    -rw-rw-r--    1 user   user       8220 Nov 23 11:45 da0.ntv
    -rw-rw-r--    1 user   user          4 Nov 23 11:45 damap0.ntv
    -rw-rw-r--    1 user   user       1310 Nov 23 11:46 idx-opt.ntv
    -rw-rw-r--    1 user   user       1310 Nov 23 11:45 idx.ntv
    -rw-rw-r--    1 user   user       2056 Nov 23 11:46 rec-opt.ntv
    -rw-rw-r--    1 user   user       2056 Nov 23 11:45 rec.ntv
    -rw-rw-r--    1 user   user       4096 Nov 23 11:46 ref0-opt.ntv
    -rw-rw-r--    1 user   user       8192 Nov 23 11:45 ref0.ntv
    -rw-rw-r--    1 user   user       2028 Nov 23 11:46 rfbmap0-opt.ntv
    -rw-rw-r--    1 user   user       2028 Nov 23 11:45 rfbmap0.ntv
    -rw-rw-r--    1 user   user        273 Nov 23 11:44 test.res

To actually use the optimized index, all the files with names ending
in B<-opt> must be renamed to remove the B<-opt>.  This can be done
by using the supplied shell script, ntvidx-useopt.sh.  This script will also
rename the original files to have a name containing B<-orig>.

    $ ntvidx-useopt.sh /tmp/test
    mv rec.ntv rec-orig.ntv
    mv rfbmap0.ntv rfbmap0-orig.ntv
    mv ref0.ntv ref0-orig.ntv
    mv idx-opt.ntv idx.ntv
    mv rec-opt.ntv rec.ntv
    mv ref0-opt.ntv ref0.ntv
    mv rfbmap0-opt.ntv rfbmap0.ntv
    $ ls -l /tmp/test
    total 72
    -rw-rw-r--    1 user   user         48 Nov 23 11:45 att0str.ntv
    -rw-rw-r--    1 user   user         12 Nov 23 11:45 att0vals.ntv
    -rw-rw-r--    1 user   user         42 Nov 23 11:45 att1str.ntv
    -rw-rw-r--    1 user   user         12 Nov 23 11:45 att1vals.ntv
    -rw-rw-r--    1 user   user       8220 Nov 23 11:45 da0.ntv
    -rw-rw-r--    1 user   user          4 Nov 23 11:45 damap0.ntv
    -rw-rw-r--    1 user   user       1310 Nov 23 11:45 idx-orig.ntv
    -rw-rw-r--    1 user   user       1310 Nov 23 11:46 idx.ntv
    -rw-rw-r--    1 user   user       2056 Nov 23 11:45 rec-orig.ntv
    -rw-rw-r--    1 user   user       2056 Nov 23 11:46 rec.ntv
    -rw-rw-r--    1 user   user       8192 Nov 23 11:45 ref0-orig.ntv
    -rw-rw-r--    1 user   user       4096 Nov 23 11:46 ref0.ntv
    -rw-rw-r--    1 user   user       2028 Nov 23 11:45 rfbmap0-orig.ntv
    -rw-rw-r--    1 user   user       2028 Nov 23 11:46 rfbmap0.ntv
    -rw-rw-r--    1 user   user        273 Nov 23 11:44 test.res

At any stage if you want to check the integrity of the database, use
ntvcheck.

    $ ntvidx-useopt.sh /tmp/test
    $ ntvcheck /tmp/test
    READING rec.ntv
	DONE: (0.002 sec)
    READING rfbmap*.ntv
	DONE: (0.000 sec)
    READING ref*.ntv...
    ..
	DONE: (0.003 sec)
    READING idx.ntv
	DONE: (0.001 sec)
    ANALYZING (3) FILES
    .
	DONE: (0.000 sec)
    DECOMPRESSING (169) DOCUMENT LISTS
    ..
    (maxfragno=0)
	DONE: (0.001 sec)
    RANKACCEL FILE: /tmp/test/da0.ntv
    $

Now the database is ready for searching.

To search for documents containing the exact word "document", use:

    $ ntvquerygen -x document | ntvsearch
    <ntv:hitlist>
    <header firsthit="1" displayedhits="2" totalhits="2"></header>
    <hit docid="2" score="3757864959">
	<preview><b>document</b> -- can be searched. Normal body
	    text of second <b>document</b> -- can be searched.
	</preview>
	<attributes>
	    <filename>filename-of-second-document</filename>
	    <title>title of second document</title>
	    <political/>
	</attributes>
    </hit>
    <hit docid="1" score="3489428479">
	<preview><b>document</b>. </preview>
	<attributes>
	    <filename>filename-of-doc-one</filename>
	    <title>title of doc one</title>
	    <financial/>
	</attributes>
    </hit>
    </ntv:hitlist>

Line breaks and indenting have been inserted in the output for
readability.  You can see that there are two "hits" for this search.
Each hit is in a <hit></hit> container which, in turn, is inside a
<ntv:hitlist></ntv:hitlist> ("hitlist") container.
The <hdr> container gives general information about the results.  It may
contain <warn> or <error> containers if they are deemed necessary.  Eg,
if you search for a word that does not exist in the dictionary:

    $ ntvquerygen -x nonexistent | ntvsearch
    <ntv:hitlist>
    <header>
	<warning>
	    Word "nonexistent" not found in dictionary
	</warning>
    </header>
    </ntv:hitlist>

To perform the same search for "document", but only in the title text of
documents, use:

    $ ntvquerygen -T title -x document | ntvsearch
    <ntv:hitlist>
    <header firsthit="1" displayedhits="1" totalhits="1"></header>
    <hit docid="2" score="3757864959">
	<preview><b>document</b> -- can be searched. </preview>
	<attributes>
	    <filename>filename-of-second-document</filename>
	    <title>title of second document</title>
	    <political/>
	</attributes>
    </hit>
    </ntv:hitlist>

As can be seen, only text from the title is shown in the preview and, in fact,
only document title text has been searched.  Only one document contains the
word "document" in the title.

To search for the word "document" but only in those documents marked
"political", use:

    $ ntvquerygen -c political -x document | ntvsearch
    <ntv:hitlist>
    <header firsthit="1" displayedhits="1" totalhits="1"></header>
    <hit docid="2" score="3757864959">
	<preview><b>document</b> -- can be searched. Normal body
	    text of second <b>document</b> -- can be searched.
	</preview>
	<attributes>
	    <filename>filename-of-second-document</filename>
	    <title>title of second document</title>
	    <political/>
	</attributes>
    </hit>
    </ntv:hitlist>

Only one document has been returned.
The "-c" option is used to apply any general "constraint" in fact, based
on document attributes.

To perform a "fuzzy" search, simply miss out the -x flag.

    $ ntvquerygen documnt | ntvsearch
    <ntv:hitlist>
    <header firsthit="1" displayedhits="2" totalhits="2">
	<warning>Word "documnt" not found in dictionary</warning>
    </header>
    <hit docid="2" score="37629" percent="95">
	<preview><b>document</b> -- can be searched. Normal body
	    text of second <b>document</b> -- can be searched.
	    This is a "political" <b>document.</b>
	</preview>
	<attributes>
	    <filename>filename-of-second-document</filename>
	    <title>title of second document</title>
	    <political/>
	</attributes>
    </hit>
    <hit docid="1" score="37629" percent="95">
	<preview><b>document.</b></preview>
	<attributes>
	    <filename>filename-of-doc-one</filename>
	    <title>title of doc one</title>
	    <financial/>
	</attributes>
    </hit>
    </ntv:hitlist>

In this the word we asked to search for is in error.  Even though the word
does not exist in the dictionary, it is possible to find words
I<similar> to the word wanted.

=head1 ADDING MORE DOCUMENTS

To add more documents it suffices to simply run B<ntvindex> again,
giving it the XML description of the documents to add.  Then, optionally,
B<ntvopt> and/or B<ntvcheck> can be run on the database.

=head1 STARTING A STANDALONE SEARCH SERVER

Searching using nextrieve as described in the previous section requires
starting the ntvsearch process each time in such a way that it "loads"
a description of the database and then performs the search.
This is OK for small
databases but, as databases get larger, the startup time of ntvsearch
increases.

An alternative is to have a permanently running server that starts
just once and then serves many requests, significantly reducing the startup
overhead.

The nextrieve search server is called ntvsearchd, and is started with
an "address" and "port".
The "address" is usually "localhost", implying connections to the server
can only be made from that host.  The "port" can be any valid TCP port
number.  Eg:

    $ ntvsearchd -A localhost -P 7777
    $

will start ntvsearchd as a permanently running process, listening on port
number 7777.

To perform a query using this server, run ntvsearch as described in the
previous section, adding the parameters:

    -A localhost -P 7777

Specifying an address and port to ntvsearch
indicates that it is a "client" process talking
to the specified server.

Eg:

    $ ntvquerygen -T title -x document | ntvsearch -A localhost -P 7777
    <ntv:hitlist>
    <header firsthit="1" displayedhits="1" totalhits="1"></header>
    <hit docid="2" score="3757864959">
	<preview><b>document</b> -- can be searched. </preview>
	<attributes>
	    <filename>filename-of-second-document</filename>
	    <title>title of second document</title>
	    <political/>
	</attributes>
    </hit>
    </ntv:hitlist>
