.\" Automatically generated by Pod::Man version 1.15
.\" Fri Nov 22 12:11:10 2002
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "NTVMAILFILTER 1"
.TH NTVMAILFILTER 1 "2.0.0" "2002-11-22" "NexTrieve"
.UC
.SH "NAME"
ntvmailfilter \- NexTrieve mail message filter
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&  ntvmailfilter [-f fnameattr] [-O initialoffset] [-o offsetattr]
\&                [-k keyattr]
\&                [-a hdr[=attr]]...
\&                [-d hdr[=attr]]...
\&                [-t hdr[=texttype]]...
\&                [-m content-type=processor]...
\&                [-M content-type;namespec=new-content-type]...
\&                [-l maxlen] [-e defencoding] [-DFhz]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBntvmailfilter\fR expects a series of filenames on stdin, each representing
the name of a mailbox or file containing a mail message, and produces on
stdout \s-1XML\s0 suitable for passing to ntvindex.
.PP
Each mail message encountered is emitted in \s-1XML\s0 as a separate document
with associated attributes.  See the note on multipart/digest below.
.PP
Several \s-1MIME\s0 types are inherently understood.  Unknown \s-1MIME\s0 types have
their content dropped.  It is possible to map between \s-1MIME\s0 types, and
to associate an external handler for a particular \s-1MIME\s0 type.
.SH "OPTIONS"
.IX Header "OPTIONS"
.if n .Ip "\f(CW""""\-f""""\fR fnameattr" 4
.el .Ip "\f(CW\-f\fR fnameattr" 4
.IX Item "-f fnameattr"
The name of the file being processed is emitted as the \*(L"fnameattr\*(R" attribute
in documents generated from that file.
.if n .Ip "\f(CW""""\-o""""\fR offsetattr" 4
.el .Ip "\f(CW\-o\fR offsetattr" 4
.IX Item "-o offsetattr"
The offset of the start of the message is emitted as a numeric attribute
\&\*(L"offsetattr\*(R".  Note that the start of the message is normally a \*(L"From \*(R"
line, but may be the start of the file (offset 0) or the position
of a \s-1MIME\s0 boundary (line starting with \*(L"\-\-\*(R") containing the message.
.if n .Ip "\f(CW""""\-O""""\fR initialoffset" 4
.el .Ip "\f(CW\-O\fR initialoffset" 4
.IX Item "-O initialoffset"
A seek on each input file is performed to this value before message
processing starts.
.if n .Ip "\f(CW""""\-k""""\fR keyattr" 4
.el .Ip "\f(CW\-k\fR keyattr" 4
.IX Item "-k keyattr"
A key attribute is emitted for every message; a string attribute
consisting of the name of the parent file and the message offset.
.if n .Ip "\f(CW""""\-a""""\fR hdr[=attr]..." 4
.el .Ip "\f(CW\-a\fR hdr[=attr]..." 4
.IX Item "-a hdr[=attr]..."
Each \-a specifies a mapping from a message header line to
an emitted attribute.  If [attr] is omitted, the value of \*(L"hdr\*(R" will
be used as the attribute name.
.Sp
Note that matching of header lines is performed in a case-insensitive
fashion, while the attribute name is emitted case-sensitively.  Ie,
both the following lines will match \*(L"Subject:\*(R" header lines, but will
emit them as different attributes:
.Sp
.Vb 2
\&    -a subject
\&    -a Subject
.Ve
.if n .Ip "\f(CW""""\-d""""\fR hdr[=attr]" 4
.el .Ip "\f(CW\-d\fR hdr[=attr]" 4
.IX Item "-d hdr[=attr]"
The header specified represents a date field, which is processed
and emitted as a number of the form \s-1YYYYMMDD\s0.  Usually used as:
.Sp
.Vb 1
\&    -d date
.Ve
.if n .Ip "\f(CW""""\-t""""\fR hdr[=texttype]..." 4
.el .Ip "\f(CW\-t\fR hdr[=texttype]..." 4
.IX Item "-t hdr[=texttype]..."
Each \-t specifies that a given message header is to be emitted as
a text container labelled <texttype>.  See the notes related to \f(CW\*(C`\-a\*(C'\fR
above.
.if n .Ip "\f(CW""""\-m""""\fR content-type=processor..." 4
.el .Ip "\f(CW\-m\fR content-type=processor..." 4
.IX Item "-m content-type=processor..."
When the \s-1MIME\s0 type specified by \*(L"content-type\*(R" is encountered, its processing
is defined by the value of \*(L"processor\*(R".
.Sp
\&\*(L"Processor\*(R" can be one of the following keywords, otherwise it is taken
to be the name of a program (and arguments) to execute to handle the
\&\s-1MIME\s0 content.
.RS 4
.Ip "\s-1DROP\s0" 4
.IX Item "DROP"
The content is explicitly dropped.
.Ip "\s-1PRINT\s0" 4
.IX Item "PRINT"
The content is assumed to be directly usable (after being decoded
according to the transfer-encoding) and will be transformed to \s-1UTF-8\s0 for
output.
The text/plain \s-1MIME\s0 type falls into this category.
.Ip "\s-1MESSAGE\s0" 4
.IX Item "MESSAGE"
The content will be treated as an encapsulated mail message.
The message/rfc822 \s-1MIME\s0 type falls into this category.
.Ip "\s-1MPMIXED\s0" 4
.IX Item "MPMIXED"
The content will be treated as a multipart/mixed \s-1MIME\s0 type.  Each
container is processed and the content will become part of the content
of the encapsulated mail message as far as indexing is concerned.
.Ip "\s-1MPALTERNATIVE\s0" 4
.IX Item "MPALTERNATIVE"
The content will be treated as a multipart/alternative \s-1MIME\s0 type.  Only
the first container is processed, with the content becoming part of the
content of the encapsulated mail message as far as indexing is
concerned.
.Ip "\s-1MPDIGEST\s0" 4
.IX Item "MPDIGEST"
The content will be treated as a multipart/digest \s-1MIME\s0 type.  Each
container defaults to a message/rfc822 \s-1MIME\s0 type.  The content of these
messages becomes part of the encapsulated mail message as far as indexing
is concerned unless the \f(CW\*(C`\-z\*(C'\fR option is also used.
.RE
.RS 4
.Sp
If none of these keywords is used, the processor is assumed to be an
external program that processes the content.  The processor should
expect the raw decoded \s-1MIME\s0 content on stdin, and should produce \s-1UTF-8\s0
on stdout.
.Sp
A small number of special tokens can be used in the processor specification
of such an external handler, that are replaced as follows:
.RS 4
.RE
.if n .Ip "\f(CW""""%C%""""\fR" 4
.el .Ip "\f(CW%C%\fR" 4
.IX Item "%C%"
Replaced with the charset in effect.
.if n .Ip "\f(CW""""%M%""""\fR" 4
.el .Ip "\f(CW%M%\fR" 4
.IX Item "%M%"
Replaced with the \s-1MIME\s0 type in effect.
.if n .Ip "\f(CW""""%N%""""\fR" 4
.el .Ip "\f(CW%N%\fR" 4
.IX Item "%N%"
Replaced with the name (or filename) found associated with the \s-1MIME\s0
information.
.RE
.RS 4
.RE
.if n .Ip "\f(CW""""\-M""""\fR content-type[;namespec]=new-content-type..." 4
.el .Ip "\f(CW\-M\fR content-type[;namespec]=new-content-type..." 4
.IX Item "-M content-type[;namespec]=new-content-type..."
A mapping is specified between a \s-1MIME\s0 type with associated name, and
another \s-1MIME\s0 type.  This is used in two situations:
.RS 4
.Ip "\(bu" 4
The \s-1MIME\s0 type is very generic, and the suffix of the filename distinguishes
the content.
.Ip "\(bu" 4
The \s-1MIME\s0 type would otherwise be treated badly according to the suffix of the
filename.  Eg, a text/plain \s-1MIME\s0 type that actually contains a word document.
.RE
.RS 4
.Sp
The namespec, if given, is a simple case-insensitive match, with a leading
and/or
trailing '*' allowed as a wildcard.  The match is performed on the
name= parameter of the Content-Type header or, if not found, the
filename= parameter of the Content-Disposition header.
.Sp
In all cases, a successful match implies that the \s-1MIME\s0 type of the
content will be treated as \*(L"new-content-type\*(R".
.RE
.if n .Ip "\f(CW""""\-l""""\fR maxlen" 4
.el .Ip "\f(CW\-l\fR maxlen" 4
.IX Item "-l maxlen"
A maximum length can be applied to string attributes.
.if n .Ip "\f(CW""""\-e""""\fR defencoding" 4
.el .Ip "\f(CW\-e\fR defencoding" 4
.IX Item "-e defencoding"
A character encoding is specified that will be applied when none is
otherwise given.  Note that the default is iso-8859\-1 rather than the more
technically correct us-ascii.  See also the \f(CW\*(C`\-F\*(C'\fR option.
.if n .Ip "\f(CW""""\-D""""\fR" 4
.el .Ip "\f(CW\-D\fR" 4
.IX Item "-D"
A <ntv:docseq> container will be generated surrounding the filter output.
This enables the output to be sent directly to ntvindex.
.if n .Ip "\f(CW""""\-F""""\fR" 4
.el .Ip "\f(CW\-F\fR" 4
.IX Item "-F"
A \*(L"force\*(R" flag that indicates that content with an unknown encoding should
be forced to be the default encoding.  Normally such content is dropped.
.if n .Ip "\f(CW""""\-z""""\fR" 4
.el .Ip "\f(CW\-z\fR" 4
.IX Item "-z"
The \f(CW\*(C`\-z\*(C'\fR flag indicates that messages contained as part of \s-1MPDIGEST\s0
containers should be treated as separate documents, rather than having
their content merged into the parent message.
.Sp
Note that the parent message is always emitted but with \-z it will
probably be short.  Also note that with \-z, the last message in the
digest will also contain text from the end of the parent message.
.if n .Ip "\f(CW""""\-h""""\fR" 4
.el .Ip "\f(CW\-h\fR" 4
.IX Item "-h"
Print some help information.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Typical simple usage:
.PP
.Vb 4
\&    ntvmailfilter -D -f mailbox -o offset \e
\&                  -a from -a to -a cc -d date -a subject \e
\&                  -t subject \e
\&                  < mailbox-names | ntvindex ...
.Ve
Handling \s-1HTML\s0, Word and \s-1PDF\s0 attachments with other NexTrieve filters:
.PP
.Vb 7
\&    ntvmailfilter -D -f mailbox -o offset \e
\&                  -a from -a to -a cc -d date -a subject \e
\&                  -t subject \e
\&                  -m 'text/html=ntvhtmlfilter -r' \e
\&                  -m 'application/msword=ntvdocfilter -r' \e
\&                  -m 'application/pdf=ntvpdffilter -r' \e
\&                  < mailbox-names | ntvindex ...
.Ve
As above, but dropping \s-1JPEG\s0 images that appear as text/plain attachments,
and mapping word documents in application/octet-stream attachments
to be handled with the ntvdocfilter:
.PP
.Vb 8
\&    ntvmailfilter -D -f mailbox -o offset \e
\&                  -a from -a to -a cc -d date -a subject \e
\&                  -t subject \e
\&                  -M 'text/plain;*.jpg=junk/junk' \e
\&                  -m 'application/msword=ntvdocfilter -r' \e
\&                  -m 'application/pdf=ntvpdffilter -r' \e
\&                  -M 'application/octet-stream;*.doc=application/msword' \e
\&                  < mailbox-names | ntvindex ...
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 1
\&    ntvhtmlfilter(1), ntvpdffilter(1), ntvdocfilter(1)
.Ve
